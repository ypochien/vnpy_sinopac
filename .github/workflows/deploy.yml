name: Deploy
on: 
  push:
  release:
    types: [published]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: 
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.13"]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python  
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: Install Dependency
        run: |
          uv sync
#      - name: Generate coverage report
#        run: |
#          make test-cov
#      - name: Upload coverage to Codecov
#        uses: codecov/codecov-action@v1
#        with:
#          token: ${{ secrets.CODECOV_TOKEN }}
#          file: ./coverage.xml
#          flags: unittests
#          name: codecov-umbrella
#          fail_ci_if_error: true

  build_publish:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v') && github.repository == 'ypochien/vnpy_sinopac'
    needs: [test]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python  
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: Install uv
        uses: astral-sh/setup-uv@v3
      - name: Install Dependency
        run: |
          uv sync
      - name: Verify version matches tag
        run: |
          python -c "
          import re
          from pathlib import Path
          
          # 從 tag 獲取版本
          tag = '${{ github.ref_name }}'
          tag_version = tag.lstrip('v')
          
          # 從 pyproject.toml 獲取版本
          content = Path('pyproject.toml').read_text()
          file_version = re.search(r'version = \"([^\"]+)\"', content).group(1)
          
          if tag_version != file_version:
              raise ValueError(f'Tag version {tag_version} != file version {file_version}')
          print(f'✅ Version {tag_version} verified')
          "
      - name: Publish package to PyPI
        run: |
          uv build
          uv publish --token ${{ secrets.PYPI_API_TOKEN }}